/// An API for coffee sales using InterSystems IRIS<br/>
/// Business logic class defined by OpenAPI in cmAPI.spec<br/>
/// Updated Oct 4, 2019 14:39:26
Class cmAPI.impl Extends (%REST.Impl) [ ProcedureBlock ]
{

/// If ExposeServerExceptions is true, then details of internal errors will be exposed.
Parameter ExposeServerExceptions = 0;

/// Returns all coffeemakers<br/>
/// The method arguments hold values for:<br/>\
ClassMethod QueryAll() As %DynamicObject
{
	// Using a try/except clause to catch server errors and write custom error message
	try {
		
		set tArr = []
		
		// Query cmAPI.coffeemaker for all coffeemakers.
		set rs = ##class(%SQL.Statement).%ExecDirect(,"SELECT * FROM cmAPI.coffeemaker")
		
		// Compose JSON from queried info
		while rs.%Next() {
			do tArr.%Push({
				"Img":    			(rs.%Get("Img")),
				"CoffeemakerID":    (rs.%Get("CoffeemakerID")),
				"Name": 			(rs.%Get("Name")),
				"Brand":        	(rs.%Get("Brand")),
				"Color":   			(rs.%Get("Color")),
				"NumCups":          (rs.%Get("NumCups")),
				"Price":        	(rs.%Get("Price"))
			})
		}
		
		return tArr.%ToJSON()
			
	} catch (ex) {
		do ..%SetStatusCode("500")
		return {"errormessage": "Server error"}
	}
}

/// Add a new coffeemaker to the store. ID is autogenerated. Other info must be provided in the request body. Name and brand are required fields. Returns new coffeemaker<br/>
/// The method arguments hold values for:<br/>
/// 		body<br/>
ClassMethod NewMaker(body As %Stream.Object) As %DynamicObject
{
	try {
		// Create new coffeemaker object
		set cm = ##class(cmAPI.coffeemaker).%New()

		// Fill new coffeemaker with data from message body
		do cm.%JSONImport(body)

		do cm.%Save()

		do cm.%JSONExportToString(.cmOut)

		return cmOut
		
	} catch (ex) {
		do ..%SetStatusCode("500")
		return {"errormessage": "Server error"}		
		}
}

/// Retrieve existing coffeemaker given ID and data. Returns coffeemaker<br/>
/// The method arguments hold values for:<br/>
///     id, CoffeemakerID<br/>
ClassMethod QueryMaker(id As %Integer) As %DynamicObject
{
	try {
		if '##class(cmAPI.coffeemaker).%ExistsId(id){
			do ..%SetStatusCode("400")
			return {"errormessage": "No coffeemaker with given ID"}
		}
		
		// Open coffeemaker with given ID
		set cm = ##class(cmAPI.coffeemaker).%OpenId(id)
		
		do cm.%JSONExportToString(.cmOut)

		return cmOut
		
	} catch(ex) {
		// Set error to 500 for categorical server errors
		do ..%SetStatusCode("500")
		return {"errormessage": "Server error"}
	}
}

/// Update existing coffeemaker coffeemaker given ID and data. Returns updated coffeemaker<br/>
/// The method arguments hold values for:<br/>
///     id, CoffeemakerID<br/>
///     body, coffeemaker info<br/>
ClassMethod EditMaker(id As %Integer, body As %Stream.Object) As %DynamicObject
{
	try {
		if '##class(cmAPI.coffeemaker).%ExistsId(id){
			do ..%SetStatusCode("400")
			return {"errormessage": "No coffeemaker with given ID"}
		}
		
		// Open coffeemaker with given ID
		set cm = ##class(cmAPI.coffeemaker).%OpenId(id)

 		// Refill opened coffeemaker with data from message body
		do cm.%JSONImport(body)
	
		do cm.%Save()
	
		do cm.%JSONExportToString(.cmOut)

		return cmOut
	
	} catch (ex) {
		do ..%SetStatusCode("500")
		set error = {"errormessage": "Server error"}
		return error
	}
}

/// Delete existing cofffeemaker given ID. Returns deleted coffeemaker<br/>
/// The method arguments hold values for:<br/>
///     id, CoffeemakerID<br/>
ClassMethod RemoveMaker(id As %Integer) As %DynamicObject
{
	try {
		if '##class(cmAPI.coffeemaker).%ExistsId(id){
			do ..%SetStatusCode("400")
			return {"errormessage": "No coffeemaker with given ID"}
		}
		
		// Delete coffeemaker
		set sc = ##class(cmAPI.coffeemaker).%DeleteId(id)
		
		return id

	} catch (ex) {
		set error = {"errormessage": "Server error"}
		return error
	}
}

}
