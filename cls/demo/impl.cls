/// An API for coffee sales using InterSystems IRIS<br/>
/// Business logic class defined by OpenAPI in demo.spec<br/>
/// Updated Sep 13, 2019 13:34:25
Class demo.impl Extends %REST.Impl [ ProcedureBlock ]
{

/// If ExposeServerExceptions is true, then details of internal errors will be exposed.
Parameter ExposeServerExceptions = 0;

/// Retrieve all coffeemakers
ClassMethod QueryAll() As %Stream.Object
{
		//Using a try/except clause to catch server errors and write custom error message
		try {
			set tArr = []
	
			//query demo.coffeemaker for all coffeemakers.
			set rs = ##class(%SQL.Statement).%ExecDirect(,"SELECT * FROM demo.coffeemaker")
			
			//push coffeemakers to tArr
			while rs.%Next() {
				do tArr.%Push({
					"img":    			(rs.%Get("Img")),
					"coffeemakerID":    (rs.%Get("CoffeemakerID")),
					"name": 			(rs.%Get("Name")),
					"brand":        	(rs.%Get("Brand")),
					"color":   			(rs.%Get("Color")),
					"numcups":          (rs.%Get("NumCups")),
					"price":        	(rs.%Get("Price"))
				})
			}
			
			//if tArr is empty, return a no content error, otherwise return the array
			if tArr '= [] {
				do ..%SetStatusCode("200")
				return tArr
			} else {
				do ..%SetStatusCode("204")
				set error = {"errormessage": "No Content"}
				return error	
			}	
						
		} catch (ex) {
			//catch-all for other server errors
			do ..%SetStatusCode("500")
			set error = {"errormessage": "Server error"}
				return error
			}
}

/// Add a new coffeemaker to the store. ID is autogenerated. Other info must be provided in the request body. Name and brand are required fields.<br/>
/// The method arguments hold values for:<br/>
///     body<br/>
ClassMethod NewMaker(body As %Stream.Object) As %Stream.Object
{
	try {
		//cast input to a dynamic object from JSON
	 	set bodyObj = {}.%FromJSON(body)
	 	
	 	//verify JSON in message body
	 	if '##class(HelperMethods).GetJSONFromRequest(bodyObj) {
			do ..%SetStatusCode("400")
	 		set error = {"errormessage": "JSON not found"}
	 		return error
	 	}
	 	
	 	//validate JSON in message body
	 	if '##class(HelperMethods).ValidateJSON(bodyObj,.error) {
			do ..%SetStatusCode("405")
			set error = {"errormessage": "Invalid message body"}
	 		return error
	 	}

	 	//create new coffeemaker object
	 	set cm = ##class(demo.coffeemaker).%New()
	 
	 	//fill new coffeemaker with data from message body
	 	do ##class(HelperMethods).CopyToCoffeemakerFromJSON(.cm,bodyObj)
	 	
	 	//save
	 	do cm.%Save()
	 	
	 	//quit successfully, returning new coffeemaker
	 	do ..%SetStatusCode("200")
	 	return cm
	 	
 	} catch (ex) {
		//As found in specification
		do ..%SetStatusCode("500")
		set error = {"errormessage": "Server error"}
		return error
 	}
}

/// Retrieve existing coffeemaker given ID and data<br/>
/// The method arguments hold values for:<br/>
///     id, CoffeemakerID<br/>
ClassMethod QueryMaker(id As %Integer) As %Stream.Object
{
	try {
		//open coffeemaker with given ID
		set coffeemaker = ##class(demo.coffeemaker).%OpenId(id)
		
		//verify coffeemaker exists
		if '$IsObject(coffeemaker) {
			do ..%SetStatusCode("204")
			set error = {"errormessage": "No Content"}
			return error
		}
		
		//convert to JSON
		set obj = {
			"img": (coffeemaker.Img),
			"coffeemakerID": (coffeemaker.CoffeemakerID),
			"name": 		(coffeemaker.Name),
			"brand":        (coffeemaker.Brand),
			"color":   		(coffeemaker.Color),
			"numcups":      (coffeemaker.NumCups),
			"price":        (coffeemaker.Price)
		}
		
		//successful status code	
		do ..%SetStatusCode("200")
		return obj
		
	} catch(ex) {
		//set error to 500 for categorical server errors
		do ..%SetStatusCode("500")
		set error = {"errormessage": "Server error"}
		return error
	}
}

/// Update existing coffeemaker coffeemaker given ID and data<br/>
/// The method arguments hold values for:<br/>
///     id, CoffeemakerID<br/>
///     body, coffeemaker info<br/>
ClassMethod EditMaker(id As %Integer, body As %Stream.Object) As %Stream.Object
{
	try {
		//Create a dynamic object from the request body JSON
		set bodyObj = {}.%FromJSON(body)
		
	 	//verify JSON in message body
		if '##class(HelperMethods).GetJSONFromRequest(bodyObj) {
			do ..%SetStatusCode("400")
			set error = {"errormessage": "JSON not found"}
			return error
		}
		
	 	//validate JSON in message body
		if '##class(HelperMethods).ValidateJSON(bodyObj,.error) {
			do ..%SetStatusCode("405")
			set error = {"errormessage": "Invalid message body"}
			return error
		}
		
		//open coffeemaker with given ID
		set cm = ##class(demo.coffeemaker).%OpenId(id)
		
		//verify coffeemaker exists
		if '$IsObject(cm) {
			do ..%SetStatusCode("204")
			set error = {"errormessage": "No content"}
			return error
		}
	
	 	//refill opened coffeemaker with data from message body
		do ##class(HelperMethods).CopyToCoffeemakerFromJSON(.cm,bodyObj)
		
	 	set sc = cm.%Save()
	
		do ..%SetStatusCode("200")
		
		return cm
		
	} catch (ex) {
		do ..%SetStatusCode("500")
		set error = {"errormessage": "Server error"}
		return error
	}
}

/// Delete existing cofffeemaker given ID<br/>
/// The method arguments hold values for:<br/>
///     id, CoffeemakerID<br/>
ClassMethod RemoveMaker(id As %Integer) As %Stream.Object
{
	try {
		//check if coffeemaker exists
		if id '= "" , ##class(demo.coffeemaker).%ExistsId(id) {
			//delete coffeemaker
			set sc = ##class(demo.coffeemaker).%DeleteId(id)
			do ..%SetStatusCode("200")
			return id
		}
		else  {
			//if coffeemaker doesn't exist
			do ..%SetStatusCode("204")
			set error = {"errormessage": "No content"}
			return error
		}
	} catch (ex) {
		do ..%SetStatusCode("500")
		set error = {"errormessage": "Server error"}
		return error
	}
}

}
